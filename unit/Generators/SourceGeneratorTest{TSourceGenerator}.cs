// Copyright 2024 Cimpress plc
//
// Licensed under the Apache License, Version 2.0 (the "License") â€“
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace Test;

sealed class SourceGeneratorTest<TSourceGenerator>
    : CSharpSourceGeneratorTest<TSourceGenerator, DefaultVerifier>
    where TSourceGenerator : new()
{
    const string Interception = """
// <auto-generated/>

namespace System.Runtime.CompilerServices;

[global::System.AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
[global::System.CodeDom.Compiler.GeneratedCode("Tiger.Stripes.Experimental", "1.0.0.0")]
sealed class InterceptsLocationAttribute(int version, string data)
    : Attribute
{
    public int Version { get; } = version;
    public string Data { get; } = data;
}
""";

    static readonly ImmutableArray<string> s_fileBaseNames = ["InterceptsLocationAttribute", "InvocationBuilderExtensions"];

    static readonly Encoding s_encoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);

    public SourceGeneratorTest(string source, string expected)
    {
        TestCode = source;
        TestState.AdditionalReferences.Add(typeof(IInvocationBuilder).Assembly);
        TestState.AdditionalReferences.Add(typeof(LambdaBootstrapHandler).Assembly);
        TestState.GeneratedSources.AddRange(s_fileBaseNames
            .Zip([Interception, expected], static (bn, c) => (File(bn), Encode(c))));
        TestState.OutputKind = ConsoleApplication;
        ReferenceAssemblies = ReferenceAssemblies.Net.Net90;

        static string File(string baseName) => $"{typeof(TSourceGenerator).Namespace}/{typeof(TSourceGenerator)}/{baseName}.g.cs";
        static SourceText Encode(string source) => SourceText.From(source, s_encoding);
    }

    protected override ParseOptions CreateParseOptions() => base.CreateParseOptions()
        .WithFeatures([new("InterceptorsNamespaces", "$(InterceptorsNamespaces);Tiger.Stripes")]);
}
